--
-- CREATE_OPERATOR
--
drop table if exists operator_test;
NOTICE:  table "operator_test" does not exist, skipping
create table operator_test(a int, b int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into operator_test select i, i from generate_series(1, 10)i;
drop function if exists int_add(int, int);
NOTICE:  function int_add(pg_catalog.int4,pg_catalog.int4) does not exist, skipping
create or replace function int_add(a int, b int) returns int as $$
declare
begin
  return a + b;
end;
$$ language plpgsql immutable strict;
create operator +% (
  leftarg = int, rightarg = int, procedure = int_add
);
select array_agg(b order by b +% a) from operator_test;
       array_agg        
------------------------
 {1,2,3,4,5,6,7,8,9,10}
(1 row)

drop operator if exists public.=(int4, int4);
NOTICE:  operator public.= does not exist, skipping
create operator public.= (
  leftarg = int4, rightarg = int4, procedure = int4eq
  ,commutator = operator(public.=)
  ,negator = <>
  ,restrict = eqsel
  ,join = eqjoinsel
  ,hashes
  ,merges
  ,sort1 = <, sort2 = <
  ,ltcmp = <, gtcmp = >
);
select t1.a, t2.b from operator_test t1
 inner join operator_test t2 on t1.b operator(public.=) t2.a;
 a  | b  
----+----
  2 |  2
  4 |  4
  6 |  6
  8 |  8
 10 | 10
  1 |  1
  3 |  3
  5 |  5
  7 |  7
  9 |  9
(10 rows)

-- Test comments
COMMENT ON OPERATOR ###### (int4, NONE) IS 'bad right unary';
ERROR:  operator does not exist: integer ######
--
-- CREATE_CAST
--
create type atype as (a int, b int);
create type btype as (b int, a int);
create cast (atype as btype) without function;
drop table if exists cast_table;
NOTICE:  table "cast_table" does not exist, skipping
create table cast_table(a int, at atype);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cast_table select i, row(i, i+i)::atype from generate_series(1, 10)i;
select a, at::btype from cast_table;
 a  |   at    
----+---------
  1 | (1,2)
  3 | (3,6)
  5 | (5,10)
  7 | (7,14)
  9 | (9,18)
  2 | (2,4)
  4 | (4,8)
  6 | (6,12)
  8 | (8,16)
 10 | (10,20)
(10 rows)

create type ctype as (a int, b int);
create or replace function int8_ctype(a int8) returns ctype as $$
declare
  ret ctype;
begin
  ret.a := ((a >> 32) & x'ffffffff'::int8)::int4;
  ret.b := (a & x'ffffffff'::int8)::int4;
  return ret;
end;
$$ language plpgsql immutable strict;
drop cast if exists (int8 as ctype);
NOTICE:  cast from type int8 to type ctype does not exist, skipping
create cast (int8 as ctype) with function int8_ctype(int8);
select a::int8::ctype, a from cast_table;
   a    | a  
--------+----
 (0,2)  |  2
 (0,4)  |  4
 (0,6)  |  6
 (0,8)  |  8
 (0,10) | 10
 (0,1)  |  1
 (0,3)  |  3
 (0,5)  |  5
 (0,7)  |  7
 (0,9)  |  9
(10 rows)

comment on cast (int8 as ctype) is 'decode int8 into two ints';
create or replace function my_int4gt(a int, b int) returns bool as $$
declare
begin
  return a > b;
end;
$$ language plpgsql immutable strict;
--
-- CREATE OPERATOR CLASS
--
drop operator if exists public.>(int4, int4);
NOTICE:  operator public.> does not exist, skipping
create operator public.>(
  leftarg = int4, rightarg = int4, procedure = my_int4gt
);
create operator class my_int_opclass for type int using btree as
  operator 1 <,
  operator 2 <=,
  operator 3 =,
  operator 4 >=,
  operator 5 public.>,
  function 1 btint4cmp(int, int)
;
select a, b from operator_test order by b using operator(public.>);
 a  | b  
----+----
 10 | 10
  9 |  9
  8 |  8
  7 |  7
  6 |  6
  5 |  5
  4 |  4
  3 |  3
  2 |  2
  1 |  1
(10 rows)

