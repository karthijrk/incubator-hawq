--
-- PLPGSQL
--
-- Testing various scenarios where plans will not be cached. 
-- MPP-16204
--
-- ************************************************************
-- * Repro with drop table inside a function
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
drop table if exists cache_tab cascade;
NOTICE:  table "cache_tab" does not exist, skipping
drop function if exists cache_test();
NOTICE:  function cache_test() does not exist, skipping
create function cache_test() returns void as
$$
begin
	drop table if exists cache_tab;
	create table cache_tab (id int) distributed randomly;
	insert into cache_tab values (1);
end;
$$ language plpgsql;
select cache_test();
NOTICE:  table "cache_tab" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists cache_tab"
PL/pgSQL function "cache_test" line 2 at SQL statement
 cache_test 
------------
 
(1 row)

-- following should not fail. 
select cache_test();
 cache_test 
------------
 
(1 row)

drop table cache_tab;
drop function cache_test();
--
-- ************************************************************
-- * Repro with SELECT .. INTO inside a function
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab
(
	c1 int, 
	c2 text
) partition by range(c1)
(default partition def,
partition part1 start (int '1') end (int '10')); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part1" for table "cache_tab"
insert into cache_tab values(1, 2);
insert into cache_tab values(2, 3);
insert into cache_tab values(3, 4);
create function cache_test(id int) returns int as $$
declare 
	v_int int;
begin 
	select c1 from cache_tab where c2 = id INTO v_int; 
	return v_int;
end;
$$ language plpgsql;
select * from cache_test(1);
 cache_test 
------------
           
(1 row)

alter table cache_tab split default partition 
start (11) inclusive
end (20) exclusive 
into (partition part2, partition def);
NOTICE:  exchanged partition "def" of relation "cache_tab" with relation "pg_temp_354284"
NOTICE:  dropped partition "def" for relation "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part2" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
-- following should not fail. 
select * from cache_test(2);
 cache_test 
------------
          1
(1 row)

drop table cache_tab cascade;
drop function cache_test(int);
--
-- ************************************************************
-- * Repro with drop table between executions 
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab (
	id int, 
	name varchar(50)
) distributed randomly;
insert into cache_tab values(1, 'abc');
insert into cache_tab values(2, 'def');
drop function if exists cache_test(var int);
NOTICE:  function cache_test(pg_catalog.int4) does not exist, skipping
create function cache_test(var int) returns varchar as $$
declare 
	v_name varchar(20) DEFAULT 'zzzz';
begin 
	select name from cache_tab into v_name where id = var; 
	return v_name;
end;
$$ language plpgsql;
select * from cache_test(1);
 cache_test 
------------
 abc
(1 row)

drop table  if exists cache_tab;
create table cache_tab (
	id int, 
	name varchar(50)
) distributed randomly;
-- following should not fail. 
select * from cache_test(2);
 cache_test 
------------
 
(1 row)

drop table cache_tab;
drop function cache_test(int);
--
-- ************************************************************
-- * Repro with return cursor 
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab (
	c1 int, 
	c2 int, 
	c3 int
) distributed randomly;
 
insert into cache_tab values(1, 2, 100);
insert into cache_tab values(2, 3, 200);
insert into cache_tab values(3, 4, 300);
create function cache_test(refcursor) returns refcursor as $$
begin 
	open $1 for select * from cache_tab;
	return $1;
end;
$$
language plpgsql;
begin;
select cache_test('refcursor');
 cache_test 
------------
 refcursor
(1 row)

fetch all in refcursor;
 c1 | c2 | c3  
----+----+-----
  2 |  3 | 200
  1 |  2 | 100
  3 |  4 | 300
(3 rows)

commit;
drop table if exists  cache_tab; 
create table cache_tab (
	c1 int, 
	c2 int, 
	c3 int
) distributed randomly;
begin;
select cache_test('refcursor');
 cache_test 
------------
 refcursor
(1 row)

fetch all in refcursor;
 c1 | c2 | c3 
----+----+----
(0 rows)

commit;
drop table cache_tab; 
drop function cache_test(refcursor);
--
-- ************************************************************
-- * Repro with fetch cursor
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab(
	c1 int, 
	c2 int, 
	c3 int
) distributed randomly; 
insert into cache_tab values(1, 2, 100);
insert into cache_tab values(1, 2, 100);
create function cache_test(var int) returns int as $$
declare 
	cur refcursor;
	res int;
	total_res int default 0;
begin
	open cur for select c2 from cache_tab where c1 = var; 
	fetch cur into res;
	while res is not null 
	loop
  		total_res := total_res + res;
  		fetch cur into res;
	end loop;
	return total_res;
end;
$$ language plpgsql;
select cache_test(1); 
 cache_test 
------------
          4
(1 row)

drop table  if exists cache_tab; 
create table cache_tab(
	c1 int, 
	c2 int, 
	c3 int
) distributed randomly; 
insert into cache_tab values(1, 2, 100);
-- following should not fail
select cache_test(1);
 cache_test 
------------
          2
(1 row)

drop table cache_tab; 
drop function cache_test(int);
--
-- ************************************************************
-- * Repro with function planned on segments
-- *    - plan should be cached
-- ************************************************************
--
create table cache_tab
(
	c1 int, 
	c2 text
) partition by range(c1)
(default partition def,
partition part1 start (int '1') end (int '10')); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part1" for table "cache_tab"
insert into cache_tab values(1, 'foo1');
create function cache_test() returns int as $$
declare 
	v_temp varchar(10); 
begin 
	select into v_temp hastriggers from pg_tables;
	if v_temp is not null
	then
		return 1;
	else
		return 0;
	end if;
end;
$$ language plpgsql;
   
select * from cache_tab where c1 = cache_test(); 
 c1 |  c2  
----+------
  1 | foo1
(1 row)

select * from cache_tab where c1 = cache_test();
 c1 |  c2  
----+------
  1 | foo1
(1 row)

drop table cache_tab;
drop function cache_test();
--
-- ************************************************************
-- * Block statement execution
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab
(
	c1 int, 
	c2 int
) partition by range(c2)
(default partition def,
partition part1 start (int '1') end (int '10')); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part1" for table "cache_tab"
insert into cache_tab values(0, 100);
insert into cache_tab values(1, 100);
insert into cache_tab values(2, 100);
create function cache_test(key int) returns int as $$ 
declare 
	v_int int;
	v_res int default 0;
begin 
loop
	select c1 from cache_tab into v_int where c2 = key;
	if found then
		return v_res;
	end if;
	if v_int != 0 then
		v_res := v_res + v_int;
	end if;
end loop;
end;
$$ language plpgsql; 
select cache_test(100); 
 cache_test 
------------
          0
(1 row)

alter table cache_tab split default partition 
start (11) inclusive
end (20) exclusive 
into (partition part2, partition def);
NOTICE:  exchanged partition "def" of relation "cache_tab" with relation "pg_temp_354284"
NOTICE:  dropped partition "def" for relation "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part2" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
select cache_test(100); 
 cache_test 
------------
          0
(1 row)

drop table cache_tab cascade; 
drop function cache_test(int);
--
-- ************************************************************
-- * Repro with PERFORM 
-- *    - Multiple executions should not raise an error 
-- ************************************************************
--
create table cache_tab
(
	c1 int, 
	c2 int
) partition by range(c2)
(default partition def,
partition part1 start (int '1') end (int '10')); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part1" for table "cache_tab"
insert into cache_tab values(1, 100);
insert into cache_tab values(2, 100);
insert into cache_tab values(3, 100);
create function cache_test() returns void AS $$
begin
	perform c1 from cache_tab;
end;
$$ language plpgsql;
select cache_test();
 cache_test 
------------
 
(1 row)

drop table if exists  cache_tab; 
create table cache_tab
(
	c1 int, 
	c2 int
) partition by range(c2)
(default partition def,
partition part1 start (int '1') end (int '10')); 
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'c1' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_def" for table "cache_tab"
NOTICE:  CREATE TABLE will create partition "cache_tab_1_prt_part1" for table "cache_tab"
insert into cache_tab values(1, 100);
select cache_test();
 cache_test 
------------
 
(1 row)

drop table cache_tab; 
drop function cache_test();
--
-- ************************************************************
-- * example with table functions
-- *
-- ************************************************************
--
create table cache_tab
(
	a int, 
	b int
) distributed randomly;
insert into cache_tab values(1, 100);
insert into cache_tab values(2, 200);
drop function if exists get_cache_tab();
NOTICE:  function get_cache_tab() does not exist, skipping
create function get_cache_tab() returns setof cache_tab as $$
	select * from cache_tab where a = 1;
$$ language sql;
create function cache_test() returns setof integer as
$$
declare 
	r integer;
begin
	for r IN select a from get_cache_tab() 
	loop
		return next r;
	end loop;
	return;
end
$$ language plpgsql;
select cache_test();
 cache_test 
------------
          1
(1 row)

drop function if exists get_cache_tab();
create function get_cache_tab() returns setof cache_tab as $$
  select * from cache_tab where a = 2;
$$ language sql;
-- plan should not be cached, returns different results
select cache_test();
 cache_test 
------------
          2
(1 row)

drop table cache_tab cascade;
NOTICE:  drop cascades to function get_cache_tab()
drop function if exists get_cache_tab() ;
NOTICE:  function get_cache_tab() does not exist, skipping
drop function if exists cache_test();
-- ************************************************************
-- * an example with CTAS
-- * 	multiple executions should not raise an error
-- ************************************************************
create table cache_tab(id int, data text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cache_tab values(1, 'abc');
insert into cache_tab values(2, 'abc');
insert into cache_tab values(3, 'abcd');
create or replace function cache_test() returns void as 
$$
begin
	drop table if exists cache_temp;
	create table cache_temp as select * from cache_tab distributed randomly;
end
$$ language plpgsql; 
select cache_test();
NOTICE:  table "cache_temp" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists cache_temp"
PL/pgSQL function "cache_test" line 2 at SQL statement
 cache_test 
------------
 
(1 row)

select * from cache_temp;
 id | data 
----+------
  1 | abc
  3 | abcd
  2 | abc
(3 rows)

drop table cache_tab;
create table cache_tab(id int, data text);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'id' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
insert into cache_tab values(1, 'abcde');
-- should not raise an error 
select cache_test();
 cache_test 
------------
 
(1 row)

-- should return 1 row 
select * from cache_temp;
 id | data  
----+-------
  1 | abcde
(1 row)

drop table cache_tab cascade; 
drop function cache_test();
drop table cache_temp;
--
-- ************************************************************
-- * recursive functions
-- ************************************************************
--
-- start_matchsubs
--
-- m|ERROR:\s+relation with OID \d+ does not exist|
-- s|ERROR:\s+relation with OID \d+ does not exist|ERROR: relation with OID DUMMY does not exist|
--
-- end_matchsubs
create table cache_tab(c1 int, c2 int) distributed randomly; 
drop function if exists cache_test(count int); 
NOTICE:  function cache_test(pg_catalog.int4) does not exist, skipping
create function cache_test(count int) returns int as $$
begin 
	if $1 <= 0 then 
		return $1;
  	else 
		insert into cache_tab values($1, $1);
  	end if; 
  	return cache_test($1-1);
end; 
$$ language plpgsql;
select cache_test(5);
 cache_test 
------------
          0
(1 row)

drop table if exists cache_tab;
create table cache_tab(c1 int, c2 int) distributed randomly; 
select cache_test(5);
 cache_test 
------------
          0
(1 row)

drop function cache_test(count int); 
--- another example with recursive functions 
create function cache_test(count int) returns int as $$
begin 
	if $1 <= 0 then 
		return $1;
  	else 
		drop table if exists cache_tab;
		create table cache_tab(c1 int, c2 int) distributed randomly; 
		insert into cache_tab values($1, $1);
  	end if; 
  	return cache_test($1-1);
end; 
$$ language plpgsql;
-- this will fail
select cache_test(5);
ERROR:  relation with OID 1076127 does not exist
CONTEXT:  SQL statement "insert into cache_tab values( $1 ,  $1 )"
PL/pgSQL function "cache_test" line 7 at SQL statement
SQL statement "SELECT  cache_test( $1 -1)"
PL/pgSQL function "cache_test" line 9 at return
set gp_plpgsql_clear_cache_always = on;
-- this will pass
select cache_test(5);
 cache_test 
------------
          0
(1 row)

drop table if exists cache_tab;
drop function cache_test(count int) cascade;
--
-- ************************************************************
-- * testing guc
-- ************************************************************
--
drop table if exists cache_tab cascade;
NOTICE:  table "cache_tab" does not exist, skipping
drop function if exists cache_test();
NOTICE:  function cache_test() does not exist, skipping
create function cache_test() returns void as
$$
begin
	drop table if exists cache_tab;
	create table cache_tab (id int) distributed randomly;
	insert into cache_tab values (1);
end;
$$ language plpgsql;
BEGIN;
select cache_test();
NOTICE:  table "cache_tab" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists cache_tab"
PL/pgSQL function "cache_test" line 2 at SQL statement
 cache_test 
------------
 
(1 row)

-- this will fail
select cache_test();
 cache_test 
------------
 
(1 row)

COMMIT; 
set gp_plpgsql_clear_cache_always = on;
select cache_test();
 cache_test 
------------
 
(1 row)

drop table cache_tab;
drop function cache_test();
--
-- ************************************************************
-- * testing guc
-- ************************************************************
--
drop table if exists cache_tab cascade;
NOTICE:  table "cache_tab" does not exist, skipping
drop function if exists cache_test(); 
NOTICE:  function cache_test() does not exist, skipping
set gp_plpgsql_clear_cache_always = off;
create function cache_test() returns void as
$$
declare count int; 
begin
	count := 3;
	while count > 0 
	loop
		drop table if exists cache_tab;
		create table cache_tab (id int) distributed randomly;
		insert into cache_tab values (1);
		count := count - 1;
	end loop;
end;
$$ language plpgsql;
-- this will fail
select cache_test();
NOTICE:  table "cache_tab" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists cache_tab"
PL/pgSQL function "cache_test" line 6 at SQL statement
ERROR:  relation with OID 1076359 does not exist
CONTEXT:  SQL statement "insert into cache_tab values (1)"
PL/pgSQL function "cache_test" line 8 at SQL statement
set gp_plpgsql_clear_cache_always = on;
-- this will pass
select cache_test();
NOTICE:  table "cache_tab" does not exist, skipping
CONTEXT:  SQL statement "drop table if exists cache_tab"
PL/pgSQL function "cache_test" line 6 at SQL statement
 cache_test 
------------
 
(1 row)

set gp_plpgsql_clear_cache_always = off;
drop function cache_test();
create function cache_test() returns void as
$$
declare count int; 
begin
	count := 3;
	while count > 0 
	loop
		set gp_plpgsql_clear_cache_always = on;
		drop table if exists cache_tab;
		create table cache_tab (id int) distributed randomly;
		insert into cache_tab values (1);
		count := count - 1;
	end loop;
end;
$$ language plpgsql;
select cache_test();
 cache_test 
------------
 
(1 row)

drop table cache_tab;
drop function cache_test();
