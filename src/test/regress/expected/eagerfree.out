drop table if exists smallt;
NOTICE:  table "smallt" does not exist, skipping
create table smallt (i int, t text, d date) distributed by (i);
insert into smallt select i%10, 'text ' || (i%15), '2011-01-01'::date + ((i%20) || ' days')::interval
from generate_series(0, 99) i;
drop table if exists bigt;
NOTICE:  table "bigt" does not exist, skipping
create table bigt (i int, t text, d date) distributed by (i);
insert into bigt select i/10, 'text ' || (i/15), '2011-01-01'::date + ((i/20) || ' days')::interval
from generate_series(0, 999999) i;
drop table if exists smallt2;
NOTICE:  table "smallt2" does not exist, skipping
create table smallt2 (i int, t text, d date) distributed by (i);
insert into smallt2 select i%5, 'text ' || (i%10), '2011-01-01'::date + ((i%15) || ' days')::interval
from generate_series(0, 49) i;
-- HashAgg, Agg
select d, count(*) from smallt group by d;
     d      | count 
------------+-------
 01-12-2011 |     5
 01-08-2011 |     5
 01-10-2011 |     5
 01-14-2011 |     5
 01-20-2011 |     5
 01-18-2011 |     5
 01-04-2011 |     5
 01-02-2011 |     5
 01-16-2011 |     5
 01-06-2011 |     5
 01-13-2011 |     5
 01-11-2011 |     5
 01-03-2011 |     5
 01-09-2011 |     5
 01-15-2011 |     5
 01-07-2011 |     5
 01-01-2011 |     5
 01-05-2011 |     5
 01-19-2011 |     5
 01-17-2011 |     5
(20 rows)

explain analyze select d, count(*) from smallt group by d;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=4.20..4.45 rows=10 width=12)
   Rows out:  20 rows at destination with 35 ms to first row, 37 ms to end, start offset by 0.498 ms.
   ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
         Group By: smallt.d
         Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 28 ms to first row, 35 ms to end, start offset by 1.024 ms.
         Executor memory:  6225K bytes avg, 6225K bytes max (seg0).
         ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
               Hash Key: smallt.d
               Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 18 ms to end, start offset by 8.318 ms.
               ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                     Group By: smallt.d
                     Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 10 ms to first row, 16 ms to end, start offset by 1.231 ms.
                     Executor memory:  6225K bytes avg, 6225K bytes max (seg0).
                     ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                           Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.084 ms to first row, 0.117 ms to end, start offset by 8.706 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 6391K bytes avg x 2 workers, 6391K bytes max (seg0).
   (slice2)    Executor memory: 6391K bytes avg x 2 workers, 6391K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Total runtime: 37.841 ms
(22 rows)

set statement_mem=2560;
select count(*) from (select i, t, d, count(*) from bigt group by i, t, d) tmp;
 count  
--------
 133333
(1 row)

explain analyze select count(*) from (select i, t, d, count(*) from bigt group by i, t, d) tmp;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=23994.53..23994.54 rows=1 width=8)
   Rows out:  1 rows with 1271 ms to end, start offset by 0.502 ms.
   ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=23994.47..23994.51 rows=1 width=8)
         Rows out:  2 rows at destination with 1243 ms to first row, 1271 ms to end, start offset by 0.508 ms.
         ->  Aggregate  (cost=23994.47..23994.48 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 1270 ms to end, start offset by 1.028 ms.
               ->  Subquery Scan tmp  (cost=21491.52..23744.17 rows=50059 width=0)
                     Rows out:  Avg 66666.5 rows x 2 workers.  Max 66668 rows (seg1) with 1075 ms to first row, 1214 ms to end, start offset by 1.075 ms.
                     ->  HashAggregate  (cost=21491.52..22742.99 rows=50059 width=48)
                           Group By: bigt.i, bigt.t, bigt.d
                           Rows out:  Avg 66666.5 rows x 2 workers.  Max 66668 rows (seg1) with 1075 ms to first row, 1184 ms to end, start offset by 1.076 ms.
                           Executor memory:  2786K bytes avg, 2786K bytes max (seg0).
                           Work_mem used:  2360K bytes avg, 2360K bytes max (seg0).
                           Work_mem wanted: 5747K bytes avg, 5747K bytes max (seg1) to lessen workfile I/O affecting 2 workers.
                           (seg1)   66668 groups total in 32 batches; 1 overflows; 66668 spill groups.
                           (seg1)   Hash chain length 1.6 avg, 15 max, using 66900 of 270336 buckets.
                           ->  Seq Scan on bigt  (cost=0.00..11479.76 rows=500588 width=18)
                                 Rows out:  Avg 500000.0 rows x 2 workers.  Max 500000 rows (seg0) with 0.064 ms to first row, 138 ms to end, start offset by 1.074 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)  * Executor memory: 2944K bytes avg x 2 workers, 2944K bytes max (seg0).  Work_mem: 2360K bytes max, 5747K bytes wanted.
 Statement statistics:
   Memory used: 2560K bytes
   Memory wanted: 6246K bytes
 Total runtime: 1272.424 ms
(25 rows)

set statement_mem=128000;
-- DQA
set gp_enable_agg_distinct=off;
set gp_eager_one_phase_agg=on;
select count(distinct d) from smallt;
 count 
-------
    20
(1 row)

explain analyze select count(distinct d) from smallt;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=6.25..6.26 rows=1 width=8)
   Rows out:  1 rows with 0.780 ms to first row, 0.781 ms to end, start offset by 0.392 ms.
   Executor memory:  29K bytes.
   Work_mem used:  29K bytes.
   ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..6.00 rows=50 width=4)
         Rows out:  100 rows at destination with 0.519 ms to first row, 0.631 ms to end, start offset by 0.413 ms.
         ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
               Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.021 ms to first row, 0.055 ms to end, start offset by 0.698 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.  Work_mem: 29K bytes max.
   (slice1)    Executor memory: 127K bytes avg x 2 workers, 127K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  gp_enable_agg_distinct=off
 Total runtime: 1.570 ms
(15 rows)

set statement_mem=2560;
select count(distinct d) from bigt;
 count 
-------
 50000
(1 row)

explain analyze select count(distinct d) from bigt;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=44017.98..44017.99 rows=1 width=8)
   Rows out:  1 rows with 6470 ms to end, start offset by 0.331 ms.
   Executor memory:  2585K bytes.
   Work_mem used:  2585K bytes.
   Work_mem wanted: 19596K bytes to lessen workfile I/O.
   ->  Gather Motion 2:1  (slice1; segments: 2)  (cost=0.00..41515.04 rows=500588 width=4)
         Rows out:  1000000 rows at destination with 2.120 ms to first row, 1655 ms to end, start offset by 0.350 ms.
         ->  Seq Scan on bigt  (cost=0.00..11479.76 rows=500588 width=4)
               Rows out:  Avg 500000.0 rows x 2 workers.  Max 500000 rows (seg0) with 0.059 ms to first row, 316 ms to end, start offset by 0.743 ms.
 Slice statistics:
   (slice0)  * Executor memory: 2851K bytes.  Work_mem: 2585K bytes max, 19596K bytes wanted.
   (slice1)    Executor memory: 167K bytes avg x 2 workers, 167K bytes max (seg0).
 Statement statistics:
   Memory used: 2560K bytes
   Memory wanted: 19795K bytes
 Settings:  gp_enable_agg_distinct=off
 Total runtime: 6470.847 ms
(17 rows)

set statement_mem=128000;
set gp_enable_agg_distinct=on;
set gp_eager_one_phase_agg=off;
-- Rescan on Agg (with Material in the inner side of nestloop)
set enable_nestloop=on;
set enable_hashjoin=off;
select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
     d      | count |     d      | sum 
------------+-------+------------+-----
 01-13-2011 |     5 | 01-13-2011 |  10
 01-11-2011 |     5 | 01-11-2011 |   0
 01-15-2011 |     5 | 01-15-2011 |  20
 01-07-2011 |     5 | 01-07-2011 |  30
 01-01-2011 |     5 | 01-01-2011 |   0
 01-03-2011 |     5 | 01-03-2011 |  10
 01-05-2011 |     5 | 01-05-2011 |  20
 01-09-2011 |     5 | 01-09-2011 |  40
 01-19-2011 |     5 | 01-19-2011 |  40
 01-17-2011 |     5 | 01-17-2011 |  30
 01-18-2011 |     5 | 01-18-2011 |  35
 01-12-2011 |     5 | 01-12-2011 |   5
 01-04-2011 |     5 | 01-04-2011 |  15
 01-08-2011 |     5 | 01-08-2011 |  35
 01-02-2011 |     5 | 01-02-2011 |   5
 01-10-2011 |     5 | 01-10-2011 |  45
 01-14-2011 |     5 | 01-14-2011 |  15
 01-16-2011 |     5 | 01-16-2011 |  25
 01-20-2011 |     5 | 01-20-2011 |  45
 01-06-2011 |     5 | 01-06-2011 |  25
(20 rows)

explain analyze select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice3; segments: 2)  (cost=8.87..18.32 rows=10 width=24)
   Rows out:  20 rows at destination with 25 ms to first row, 26 ms to end, start offset by 0.771 ms.
   ->  Nested Loop  (cost=8.87..18.32 rows=10 width=24)
         Join Filter: t1.d = t2.d
         Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 20 ms to first row, 23 ms to end, start offset by 4.038 ms.
         ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
               Group By: public.smallt.d
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 3.238 ms to first row, 5.580 ms to end, start offset by 21 ms.
               Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
               ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
                     Hash Key: public.smallt.d
                     Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 0.885 ms to first row, 0.892 ms to end, start offset by 22 ms.
                     ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                           Group By: public.smallt.d
                           Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 2.455 ms to first row, 4.518 ms to end, start offset by 6.369 ms.
                           Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
                           ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                                 Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.039 ms to first row, 0.071 ms to end, start offset by 5.261 ms.
         ->  Materialize  (cost=4.67..4.87 rows=10 width=12)
               Rows out:  Avg 101.0 rows x 2 workers.  Max 101 rows (seg0) with 18 ms to first row, 19 ms to end of 11 scans, start offset by 23 ms.
               ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
                     Group By: public.smallt.d
                     Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 14 ms to first row, 17 ms to end, start offset by 4.047 ms.
                     Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
                     ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
                           Hash Key: public.smallt.d
                           Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 12 ms to end, start offset by 5.206 ms.
                           ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                                 Group By: public.smallt.d
                                 Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 2.461 ms to first row, 4.560 ms to end, start offset by 6.808 ms.
                                 Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
                                 ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=8)
                                       Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.036 ms to first row, 0.071 ms to end, start offset by 7.894 ms.
 Slice statistics:
   (slice0)    Executor memory: 382K bytes.
   (slice1)    Executor memory: 3383K bytes avg x 2 workers, 3383K bytes max (seg0).
   (slice2)    Executor memory: 3383K bytes avg x 2 workers, 3383K bytes max (seg0).
   (slice3)    Executor memory: 3403K bytes avg x 2 workers, 3403K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=off; enable_nestloop=on; gp_enable_agg_distinct=on
 Total runtime: 27.318 ms
(42 rows)

set enable_nestloop=off;
set enable_hashjoin=on;
-- Rescan on Agg (with Material in the inner side of nestloop)
set enable_nestloop=on;
set enable_hashjoin=off;
select t1.*, t2.* from
(select i, count(*) from smallt group by i) as t1, (select i, sum(i) from smallt group by i) as t2
where t1.i = t2.i;
 i | count | i | sum 
---+-------+---+-----
 3 |    10 | 3 |  30
 9 |    10 | 9 |  90
 1 |    10 | 1 |  10
 7 |    10 | 7 |  70
 5 |    10 | 5 |  50
 2 |    10 | 2 |  20
 6 |    10 | 6 |  60
 0 |    10 | 0 |   0
 8 |    10 | 8 |  80
 4 |    10 | 4 |  40
(10 rows)

explain analyze select t1.*, t2.* from
(select i, count(*) from smallt group by i) as t1, (select i, sum(i) from smallt group by i) as t2
where t1.i = t2.i;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=7.23..9.71 rows=5 width=24)
   Rows out:  10 rows at destination with 11 ms to end, start offset by 0.527 ms.
   ->  Nested Loop  (cost=7.23..9.71 rows=5 width=24)
         Join Filter: t1.i = t2.i
         Rows out:  Avg 5.0 rows x 2 workers.  Max 5 rows (seg0) with 7.759 ms to first row, 9.996 ms to end, start offset by 1.017 ms.
         ->  HashAggregate  (cost=3.50..3.62 rows=5 width=12)
               Group By: public.smallt.i
               Rows out:  Avg 5.0 rows x 2 workers.  Max 5 rows (seg0) with 2.853 ms to first row, 5.061 ms to end, start offset by 5.920 ms.
               Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
               ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                     Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.018 ms to first row, 0.041 ms to end, start offset by 7.857 ms.
         ->  Materialize  (cost=3.73..3.83 rows=5 width=12)
               Rows out:  Avg 26.0 rows x 2 workers.  Max 26 rows (seg0) with 5.797 ms to first row, 5.803 ms to end of 6 scans, start offset by 10 ms.
               ->  HashAggregate  (cost=3.50..3.62 rows=5 width=12)
                     Group By: public.smallt.i
                     Rows out:  Avg 5.0 rows x 2 workers.  Max 5 rows (seg0) with 2.580 ms to first row, 4.886 ms to end, start offset by 1.026 ms.
                     Executor memory:  3153K bytes avg, 3153K bytes max (seg0).
                     ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                           Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.042 ms to first row, 0.067 ms to end, start offset by 2.338 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 3327K bytes avg x 2 workers, 3327K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=off; enable_nestloop=on; gp_enable_agg_distinct=on
 Total runtime: 12.032 ms
(26 rows)

set enable_nestloop=off;
set enable_hashjoin=on;
-- Limit on Agg
select d, count(*) from smallt group by d limit 5; --ignore
     d      | count 
------------+-------
 01-12-2011 |     5
 01-08-2011 |     5
 01-10-2011 |     5
 01-14-2011 |     5
 01-20-2011 |     5
(5 rows)

explain analyze select d, count(*) from smallt group by d limit 5;
                                                                               QUERY PLAN                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=4.20..4.36 rows=5 width=12)
   Rows out:  5 rows with 29 ms to end, start offset by 0.505 ms.
   ->  Gather Motion 2:1  (slice2; segments: 2)  (cost=4.20..4.36 rows=3 width=12)
         Rows out:  5 rows at destination with 29 ms to end, start offset by 0.507 ms.
         ->  Limit  (cost=4.20..4.26 rows=3 width=12)
               Rows out:  Avg 5.0 rows x 2 workers.  Max 5 rows (seg0) with 27 ms to first row, 29 ms to end, start offset by 1.050 ms.
               ->  HashAggregate  (cost=4.20..4.45 rows=10 width=12)
                     Group By: smallt.d
                     Rows out:  Avg 5.0 rows x 2 workers.  Max 5 rows (seg0) with 27 ms to first row, 29 ms to end, start offset by 1.051 ms.
                     Executor memory:  6225K bytes avg, 6225K bytes max (seg0).
                     ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=3.50..3.90 rows=10 width=12)
                           Hash Key: smallt.d
                           Rows out:  Avg 10.0 rows x 2 workers at destination.  Max 10 rows (seg0) with 0.052 ms to first row, 0.077 ms to end, start offset by 25 ms.
                           ->  HashAggregate  (cost=3.50..3.50 rows=10 width=12)
                                 Group By: smallt.d
                                 Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 9.732 ms to first row, 16 ms to end, start offset by 3.065 ms.
                                 Executor memory:  6225K bytes avg, 6225K bytes max (seg0).
                                 ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
                                       Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.137 ms to first row, 0.166 ms to end, start offset by 10 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 6391K bytes avg x 2 workers, 6391K bytes max (seg0).
   (slice2)    Executor memory: 6391K bytes avg x 2 workers, 6391K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Total runtime: 33.256 ms
(27 rows)

-- HashJoin
select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i;
 i |    t    |     d      
---+---------+------------
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
(1000 rows)

explain analyze select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=4.25..20.00 rows=501 width=15)
   Rows out:  1000 rows at destination with 21 ms to first row, 33 ms to end, start offset by 0.378 ms.
   ->  Hash Join  (cost=4.25..20.00 rows=501 width=15)
         Hash Cond: t1.i = t2.i
         Rows out:  Avg 500.0 rows x 2 workers.  Max 500 rows (seg0) with 19 ms to first row, 32 ms to end, start offset by 0.900 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg0).
         Work_mem used:  1K bytes avg, 1K bytes max (seg0).
         (seg0)   Hash chain length 10.0 avg, 10 max, using 5 of 1048589 buckets.
         ->  Seq Scan on smallt t1  (cost=0.00..3.00 rows=50 width=15)
               Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.024 ms to first row, 0.040 ms to end, start offset by 0.900 ms.
         ->  Hash  (cost=3.00..3.00 rows=50 width=4)
               Rows in:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.152 ms to end, start offset by 20 ms.
               ->  Seq Scan on smallt t2  (cost=0.00..3.00 rows=50 width=4)
                     Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.073 ms to first row, 0.101 ms to end, start offset by 20 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 12487K bytes avg x 2 workers, 12487K bytes max (seg0).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Total runtime: 34.312 ms
(21 rows)

-- Rescan on HashJoin
--select t1.* from (select t11.* from smallt as t11, smallt as t22 where t11.i = t22.i and t11.i < 2) as t1,
--   (select t11.* from smallt as t11, smallt as t22 where t11.d = t22.d and t11.i < 5) as t2;
-- Material in SubPlan
select smallt2.* from smallt2
where i < (select count(*) from smallt where smallt.i = smallt2.i);
 i |   t    |     d      
---+--------+------------
 1 | text 1 | 01-02-2011
 3 | text 3 | 01-04-2011
 1 | text 6 | 01-07-2011
 3 | text 8 | 01-09-2011
 1 | text 1 | 01-12-2011
 3 | text 3 | 01-14-2011
 1 | text 6 | 01-02-2011
 3 | text 8 | 01-04-2011
 1 | text 1 | 01-07-2011
 3 | text 3 | 01-09-2011
 1 | text 6 | 01-12-2011
 3 | text 8 | 01-14-2011
 1 | text 1 | 01-02-2011
 3 | text 3 | 01-04-2011
 1 | text 6 | 01-07-2011
 3 | text 8 | 01-09-2011
 1 | text 1 | 01-12-2011
 3 | text 3 | 01-14-2011
 1 | text 6 | 01-02-2011
 3 | text 8 | 01-04-2011
 0 | text 0 | 01-01-2011
 2 | text 2 | 01-03-2011
 4 | text 4 | 01-05-2011
 0 | text 5 | 01-06-2011
 2 | text 7 | 01-08-2011
 4 | text 9 | 01-10-2011
 0 | text 0 | 01-11-2011
 2 | text 2 | 01-13-2011
 4 | text 4 | 01-15-2011
 0 | text 5 | 01-01-2011
 2 | text 7 | 01-03-2011
 4 | text 9 | 01-05-2011
 0 | text 0 | 01-06-2011
 2 | text 2 | 01-08-2011
 4 | text 4 | 01-10-2011
 0 | text 5 | 01-11-2011
 2 | text 7 | 01-13-2011
 4 | text 9 | 01-15-2011
 0 | text 0 | 01-01-2011
 2 | text 2 | 01-03-2011
 4 | text 4 | 01-05-2011
 0 | text 5 | 01-06-2011
 2 | text 7 | 01-08-2011
 4 | text 9 | 01-10-2011
 0 | text 0 | 01-11-2011
 2 | text 2 | 01-13-2011
 4 | text 4 | 01-15-2011
 0 | text 5 | 01-01-2011
 2 | text 7 | 01-03-2011
 4 | text 9 | 01-05-2011
(50 rows)

explain select smallt2.* from smallt2
where i < (select count(*) from smallt where smallt.i = smallt2.i);
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=4.15..7.19 rows=9 width=15)
   ->  Hash Join  (cost=4.15..7.19 rows=9 width=15)
         Hash Cond: smallt2.i = "Expr_SUBQUERY".csq_c0
         Join Filter: smallt2.i < "Expr_SUBQUERY".csq_c1
         ->  Seq Scan on smallt2  (cost=0.00..2.50 rows=25 width=15)
         ->  Hash  (cost=4.02..4.02 rows=5 width=12)
               ->  HashAggregate  (cost=3.75..3.92 rows=5 width=12)
                     Filter: smallt.i < count(*)
                     Group By: smallt.i
                     ->  Seq Scan on smallt  (cost=0.00..3.00 rows=50 width=4)
 Settings:  enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
(11 rows)

-- Append + Material in SubPlan
drop table if exists smallt_part;
NOTICE:  table "smallt_part" does not exist, skipping
drop table if exists smallt2_part;
NOTICE:  table "smallt2_part" does not exist, skipping
create table smallt_part (i int, t text, d date)
partition by range (d) (start ('2011-01-01'::date) end ('2011-01-21'::date) every ('5 days'::interval));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_1" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_2" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_3" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_4" for table "smallt_part"
create table smallt2_part (i int, t text, d date)
partition by range (d) (start ('2011-01-01'::date) end ('2011-01-16'::date) every ('4 days'::interval));
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_1" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_2" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_3" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_4" for table "smallt2_part"
insert into smallt_part select i%10, 'text ' || (i%15), '2011-01-01'::date + ((i%20) || ' days')::interval
from generate_series(0, 99) i;
insert into smallt2_part select i%5, 'text ' || (i%10), '2011-01-01'::date + ((i%15) || ' days')::interval
from generate_series(0, 49) i;
select * from smallt_part where i < any (select count(*) from smallt2_part where smallt_part.i = smallt2_part.i group by d);
 i |    t    |     d      
---+---------+------------
 0 | text 0  | 01-01-2011
 2 | text 2  | 01-03-2011
 0 | text 5  | 01-01-2011
 2 | text 7  | 01-03-2011
 0 | text 10 | 01-01-2011
 2 | text 12 | 01-03-2011
 0 | text 0  | 01-01-2011
 2 | text 2  | 01-03-2011
 0 | text 5  | 01-01-2011
 2 | text 7  | 01-03-2011
 0 | text 10 | 01-11-2011
 2 | text 12 | 01-13-2011
 0 | text 0  | 01-11-2011
 2 | text 2  | 01-13-2011
 0 | text 5  | 01-11-2011
 2 | text 7  | 01-13-2011
 0 | text 10 | 01-11-2011
 2 | text 12 | 01-13-2011
 0 | text 0  | 01-11-2011
 2 | text 2  | 01-13-2011
 1 | text 1  | 01-02-2011
 3 | text 3  | 01-04-2011
 1 | text 6  | 01-02-2011
 3 | text 8  | 01-04-2011
 1 | text 11 | 01-02-2011
 3 | text 13 | 01-04-2011
 1 | text 1  | 01-02-2011
 3 | text 3  | 01-04-2011
 1 | text 6  | 01-02-2011
 3 | text 8  | 01-04-2011
 1 | text 11 | 01-12-2011
 3 | text 13 | 01-14-2011
 1 | text 1  | 01-12-2011
 3 | text 3  | 01-14-2011
 1 | text 6  | 01-12-2011
 3 | text 8  | 01-14-2011
 1 | text 11 | 01-12-2011
 3 | text 13 | 01-14-2011
 1 | text 1  | 01-12-2011
 3 | text 3  | 01-14-2011
(40 rows)

explain analyze select * from smallt_part where i < any (select count(*) from smallt2_part where smallt_part.i = smallt2_part.i group by d);
                                                                                            QUERY PLAN                                                                                             
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice17; segments: 2)  (cost=0.00..51345.98 rows=467 width=40)
   Rows out:  40 rows at destination with 252 ms to first row, 258 ms to end, start offset by 125 ms.
   ->  Append  (cost=0.00..51345.98 rows=467 width=40)
         Rows out:  Avg 20.0 rows x 2 workers.  Max 20 rows (seg0) with 45 ms to first row, 66 ms to end, start offset by 310 ms.
         ->  Seq Scan on smallt_part_1_prt_1 smallt_part  (cost=0.00..12836.50 rows=117 width=40)
               Filter: (subplan)
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 45 ms to first row, 48 ms to end, start offset by 310 ms.
               SubPlan 1
                 ->  HashAggregate  (cost=27.45..27.49 rows=2 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  Avg 17.5 rows x 2 workers.  Max 25 rows (seg1) with 88 ms to first row, 94 ms to end of 15 scans, start offset by 364 ms.
                       Executor memory:  465K bytes avg, 465K bytes max (seg0).
                       ->  Result  (cost=0.00..27.35 rows=2 width=4)
                             Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 77 ms to first row, 88 ms to end of 15 scans, start offset by 364 ms.
                             ->  Append  (cost=0.00..27.35 rows=2 width=4)
                                   Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 77 ms to first row, 88 ms to end of 15 scans, start offset by 364 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 40.0 rows x 2 workers.  Max 40 rows (seg0) with 31 ms to end of 10 scans, start offset by 358 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg1) with 77 ms to end of 15 scans, start offset by 364 ms.
                                               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.026 ms to first row, 31 ms to end, start offset by 310 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.038 ms to first row, 0.046 ms to end, start offset by 338 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 32.5 rows x 2 workers.  Max 50 rows (seg1) with 11 ms to end of 15 scans, start offset by 364 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg1) with 11 ms to end of 15 scans, start offset by 364 ms.
                                               ->  Broadcast Motion 2:2  (slice2; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.016 ms to first row, 13 ms to end, start offset by 341 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.047 ms to first row, 0.055 ms to end, start offset by 264 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 30.0 rows x 2 workers.  Max 30 rows (seg0) with 0.053 ms to first row, 0.141 ms to end of 10 scans, start offset by 358 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg1) with 0.041 ms to first row, 0.080 ms to end of 15 scans, start offset by 364 ms.
                                               ->  Broadcast Motion 2:2  (slice3; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.011 ms to first row, 0.026 ms to end, start offset by 354 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.045 ms to first row, 0.052 ms to end, start offset by 350 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 22.5 rows x 2 workers.  Max 30 rows (seg1) with 0.036 ms to first row, 0.128 ms to end of 15 scans, start offset by 364 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg1) with 0.030 ms to first row, 0.058 ms to end of 15 scans, start offset by 364 ms.
                                               ->  Broadcast Motion 2:2  (slice4; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.007 ms to first row, 0.020 ms to end, start offset by 354 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.058 ms to first row, 0.063 ms to end, start offset by 238 ms.
         ->  Seq Scan on smallt_part_1_prt_2 smallt_part  (cost=0.00..12836.50 rows=117 width=40)
               Filter: (subplan)
               Rows out:  0 rows (seg0) with 0 ms to end.
               SubPlan 1
                 ->  HashAggregate  (cost=0.02..0.04 rows=1 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  0 rows (seg0) with 0 ms to end.
                       ->  Result  (cost=0.00..0.00 rows=1 width=4)
                             Rows out:  0 rows (seg0) with 0 ms to end.
                             ->  Append  (cost=0.00..0.00 rows=1 width=4)
                                   Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=0.00..0.01 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=0.00..0.01 rows=1 width=4)
                                               Rows out:  0 rows (seg0) with 0 ms to end.
                                               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..0.00 rows=1 width=4)
                                                     Rows out:  0 rows at destination (seg0) with 0 ms to end.
                                                     ->  Seq Scan on smallt2_part  (cost=0.00..0.00 rows=1 width=4)
                                                           Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg0) with 0.063 ms to first row, 0.125 ms to end of 15 scans, start offset by 365 ms.
                                               ->  Broadcast Motion 2:2  (slice5; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.022 ms to first row, 0.042 ms to end, start offset by 358 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.044 ms to first row, 0.053 ms to end, start offset by 513 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg0) with 0.707 ms to first row, 0.750 ms to end of 15 scans, start offset by 365 ms.
                                               ->  Broadcast Motion 2:2  (slice6; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.016 ms to first row, 0.689 ms to end, start offset by 358 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.062 ms to first row, 0.072 ms to end, start offset by 414 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg0) with 0.036 ms to first row, 0.073 ms to end of 15 scans, start offset by 365 ms.
                                               ->  Broadcast Motion 2:2  (slice7; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.011 ms to first row, 0.024 ms to end, start offset by 359 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.056 ms to first row, 0.065 ms to end, start offset by 496 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg0) with 0.029 ms to first row, 0.054 ms to end of 15 scans, start offset by 365 ms.
                                               ->  Broadcast Motion 2:2  (slice8; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.007 ms to first row, 0.019 ms to end, start offset by 359 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.056 ms to first row, 0.064 ms to end, start offset by 549 ms.
         ->  Seq Scan on smallt_part_1_prt_1 smallt_part  (cost=0.00..22.02 rows=1 width=40)
               Filter: (subplan)
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 283 ms to first row, 288 ms to end, start offset by 283 ms.
               SubPlan 1
                 ->  HashAggregate  (cost=0.02..0.04 rows=1 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  Avg 17.5 rows x 2 workers.  Max 25 rows (seg1) with 269 ms to first row, 276 ms to end of 15 scans, start offset by 570 ms.
                       Executor memory:  465K bytes avg, 465K bytes max (seg0).
                       ->  Result  (cost=0.00..0.00 rows=1 width=4)
                             Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 238 ms to first row, 270 ms to end of 15 scans, start offset by 570 ms.
                             ->  Append  (cost=0.00..0.00 rows=1 width=4)
                                   Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 238 ms to first row, 269 ms to end of 15 scans, start offset by 570 ms.
                                   ->  Result  (cost=0.00..0.01 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=0.00..0.01 rows=1 width=4)
                                               Rows out:  0 rows (seg0) with 0 ms to end.
                                               ->  Broadcast Motion 2:2  (slice6; segments: 2)  (cost=0.00..0.00 rows=1 width=4)
                                                     Rows out:  0 rows at destination (seg0) with 0 ms to end.
                                                     ->  Seq Scan on smallt2_part  (cost=0.00..0.00 rows=1 width=4)
                                                           Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 40.0 rows x 2 workers.  Max 40 rows (seg0) with 0.048 ms to first row, 0.167 ms to end of 10 scans, start offset by 369 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg1) with 0.046 ms to first row, 0.131 ms to end of 15 scans, start offset by 378 ms.
                                               ->  Broadcast Motion 2:2  (slice9; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.015 ms to first row, 0.034 ms to end, start offset by 366 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.174 ms to first row, 0.188 ms to end, start offset by 532 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 32.5 rows x 2 workers.  Max 50 rows (seg1) with 0.040 ms to first row, 0.174 ms to end of 15 scans, start offset by 378 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg1) with 0.036 ms to first row, 0.087 ms to end of 15 scans, start offset by 378 ms.
                                               ->  Broadcast Motion 2:2  (slice10; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.008 ms to first row, 0.026 ms to end, start offset by 366 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.145 ms to first row, 0.161 ms to end, start offset by 454 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 30.0 rows x 2 workers.  Max 30 rows (seg0) with 0.039 ms to first row, 0.128 ms to end of 10 scans, start offset by 369 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg1) with 0.034 ms to first row, 0.082 ms to end of 15 scans, start offset by 378 ms.
                                               ->  Broadcast Motion 2:2  (slice11; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.011 ms to first row, 0.025 ms to end, start offset by 366 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.173 ms to first row, 0.185 ms to end, start offset by 486 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 22.5 rows x 2 workers.  Max 30 rows (seg1) with 0.035 ms to first row, 0.119 ms to end of 15 scans, start offset by 378 ms.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg1) with 0.029 ms to first row, 0.066 ms to end of 15 scans, start offset by 378 ms.
                                               ->  Broadcast Motion 2:2  (slice12; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.008 ms to first row, 0.020 ms to end, start offset by 366 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.149 ms to first row, 0.161 ms to end, start offset by 487 ms.
         ->  Seq Scan on smallt_part_1_prt_2 smallt_part  (cost=0.00..22.02 rows=1 width=40)
               Filter: (subplan)
               Rows out:  0 rows (seg0) with 0 ms to end.
               SubPlan 1
                 ->  HashAggregate  (cost=0.02..0.04 rows=1 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  0 rows (seg0) with 0 ms to end.
                       Executor memory:  401K bytes avg, 401K bytes max (seg0).
                       ->  Result  (cost=0.00..0.00 rows=1 width=4)
                             Rows out:  0 rows (seg0) with 0 ms to end.
                             ->  Append  (cost=0.00..0.00 rows=1 width=4)
                                   Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=0.00..0.01 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=0.00..0.01 rows=1 width=4)
                                               Rows out:  0 rows (seg0) with 0 ms to end.
                                               ->  Broadcast Motion 2:2  (slice11; segments: 2)  (cost=0.00..0.00 rows=1 width=4)
                                                     Rows out:  0 rows at destination (seg0) with 0 ms to end.
                                                     ->  Seq Scan on smallt2_part  (cost=0.00..0.00 rows=1 width=4)
                                                           Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg0) with 0.042 ms to first row, 0.105 ms to end of 15 scans, start offset by 376 ms.
                                               ->  Broadcast Motion 2:2  (slice13; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.014 ms to first row, 0.031 ms to end, start offset by 369 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.174 ms to first row, 0.187 ms to end, start offset by 471 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg0) with 0.036 ms to first row, 0.086 ms to end of 15 scans, start offset by 376 ms.
                                               ->  Broadcast Motion 2:2  (slice14; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.007 ms to first row, 0.025 ms to end, start offset by 369 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.204 ms to first row, 0.219 ms to end, start offset by 619 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg0) with 0.037 ms to first row, 0.082 ms to end of 15 scans, start offset by 376 ms.
                                               ->  Broadcast Motion 2:2  (slice15; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.013 ms to first row, 0.027 ms to end, start offset by 369 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.148 ms to first row, 0.159 ms to end, start offset by 535 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg0) with 0.028 ms to first row, 0.057 ms to end of 15 scans, start offset by 376 ms.
                                               ->  Broadcast Motion 2:2  (slice16; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.007 ms to first row, 0.018 ms to end, start offset by 369 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.201 ms to first row, 0.218 ms to end, start offset by 432 ms.
         ->  Seq Scan on smallt_part_1_prt_3 smallt_part  (cost=0.00..22.02 rows=1 width=40)
               Filter: (subplan)
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.903 ms to first row, 5.231 ms to end, start offset by 627 ms.
               SubPlan 1
                 ->  HashAggregate  (cost=0.02..0.04 rows=1 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  Avg 17.5 rows x 2 workers.  Max 25 rows (seg1) with 6.224 ms to first row, 12 ms to end of 15 scans, start offset by 638 ms.
                       Executor memory:  465K bytes avg, 465K bytes max (seg0).
                       ->  Result  (cost=0.00..0.00 rows=1 width=4)
                             Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 4.772 ms to first row, 6.687 ms to end of 15 scans, start offset by 638 ms.
                             ->  Append  (cost=0.00..0.00 rows=1 width=4)
                                   Rows out:  Avg 125.0 rows x 2 workers.  Max 150 rows (seg1) with 4.767 ms to first row, 6.571 ms to end of 15 scans, start offset by 638 ms.
                                   ->  Result  (cost=0.00..0.01 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=0.00..0.01 rows=1 width=4)
                                               Rows out:  0 rows (seg0) with 0 ms to end.
                                               ->  Broadcast Motion 2:2  (slice16; segments: 2)  (cost=0.00..0.00 rows=1 width=4)
                                                     Rows out:  0 rows at destination (seg0) with 0 ms to end.
                                                     ->  Seq Scan on smallt2_part  (cost=0.00..0.00 rows=1 width=4)
                                                           Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 40.0 rows x 2 workers.  Max 40 rows (seg0) with 0.291 ms to first row, 0.420 ms to end of 10 scans, start offset by 632 ms.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg1) with 0.378 ms to first row, 0.441 ms to end of 15 scans, start offset by 638 ms.
                                               ->  Broadcast Motion 2:2  (slice17; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.186 ms to first row, 0.244 ms to end, start offset by 627 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.153 ms to first row, 0.166 ms to end, start offset by 451 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 32.5 rows x 2 workers.  Max 50 rows (seg1) with 0.127 ms to first row, 0.268 ms to end of 15 scans, start offset by 638 ms.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg1) with 0.122 ms to first row, 0.178 ms to end of 15 scans, start offset by 638 ms.
                                               ->  Broadcast Motion 2:2  (slice18; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.019 ms to first row, 0.076 ms to end, start offset by 628 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.178 ms to first row, 0.198 ms to end, start offset by 576 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 30.0 rows x 2 workers.  Max 30 rows (seg0) with 0.064 ms to first row, 0.160 ms to end of 10 scans, start offset by 632 ms.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg1) with 0.118 ms to first row, 0.206 ms to end of 15 scans, start offset by 638 ms.
                                               ->  Broadcast Motion 2:2  (slice19; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.022 ms to first row, 0.049 ms to end, start offset by 628 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.234 ms to first row, 0.249 ms to end, start offset by 523 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  Avg 22.5 rows x 2 workers.  Max 30 rows (seg1) with 0.863 ms to first row, 0.951 ms to end of 15 scans, start offset by 638 ms.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg1) with 0.855 ms to first row, 0.890 ms to end of 15 scans, start offset by 638 ms.
                                               ->  Broadcast Motion 2:2  (slice20; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.019 ms to first row, 0.042 ms to end, start offset by 628 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.157 ms to first row, 0.167 ms to end, start offset by 497 ms.
         ->  Seq Scan on smallt_part_1_prt_4 smallt_part  (cost=0.00..22.02 rows=1 width=40)
               Filter: (subplan)
               Rows out:  0 rows (seg0) with 0 ms to end.
               SubPlan 1
                 ->  HashAggregate  (cost=0.02..0.04 rows=1 width=12)
                       Group By: public.smallt2_part.d
                       Rows out:  0 rows (seg0) with 0 ms to end.
                       Executor memory:  401K bytes avg, 401K bytes max (seg0).
                       ->  Result  (cost=0.00..0.00 rows=1 width=4)
                             Rows out:  0 rows (seg0) with 0 ms to end.
                             ->  Append  (cost=0.00..0.00 rows=1 width=4)
                                   Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=0.00..0.01 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=0.00..0.01 rows=1 width=4)
                                               Rows out:  0 rows (seg0) with 0 ms to end.
                                               ->  Broadcast Motion 2:2  (slice21; segments: 2)  (cost=0.00..0.00 rows=1 width=4)
                                                     Rows out:  0 rows at destination (seg0) with 0 ms to end.
                                                     ->  Seq Scan on smallt2_part  (cost=0.00..0.00 rows=1 width=4)
                                                           Rows out:  0 rows (seg0) with 0 ms to end.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 200.0 rows x 2 workers.  Max 240 rows (seg0) with 0.196 ms to first row, 0.267 ms to end of 15 scans, start offset by 641 ms.
                                               ->  Broadcast Motion 2:2  (slice22; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 16.0 rows x 2 workers at destination.  Max 16 rows (seg0) with 0.055 ms to first row, 0.162 ms to end, start offset by 633 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_1 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 8.0 rows x 2 workers.  Max 8 rows (seg0) with 0.152 ms to first row, 0.167 ms to end, start offset by 611 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 162.5 rows x 2 workers.  Max 195 rows (seg0) with 0.161 ms to first row, 0.216 ms to end of 15 scans, start offset by 641 ms.
                                               ->  Broadcast Motion 2:2  (slice23; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 13.0 rows x 2 workers at destination.  Max 13 rows (seg0) with 0.087 ms to first row, 0.148 ms to end, start offset by 633 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_2 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.5 rows x 2 workers.  Max 10 rows (seg1) with 0.143 ms to first row, 0.167 ms to end, start offset by 473 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 150.0 rows x 2 workers.  Max 180 rows (seg0) with 0.164 ms to first row, 0.208 ms to end of 15 scans, start offset by 641 ms.
                                               ->  Broadcast Motion 2:2  (slice24; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 12.0 rows x 2 workers at destination.  Max 12 rows (seg0) with 0.052 ms to first row, 0.132 ms to end, start offset by 633 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_3 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 6.0 rows x 2 workers.  Max 6 rows (seg0) with 0.200 ms to first row, 0.213 ms to end, start offset by 600 ms.
                                   ->  Result  (cost=6.84..6.85 rows=1 width=4)
                                         Filter: $0 = public.smallt2_part.i
                                         Rows out:  0 rows (seg0) with 0 ms to end.
                                         ->  Materialize for deadlock safety  (cost=6.84..6.85 rows=1 width=4)
                                               Rows out:  Avg 112.5 rows x 2 workers.  Max 135 rows (seg0) with 0.081 ms to first row, 0.110 ms to end of 15 scans, start offset by 641 ms.
                                               ->  Broadcast Motion 2:2  (slice25; segments: 2)  (cost=0.00..6.84 rows=1 width=4)
                                                     Rows out:  Avg 9.0 rows x 2 workers at destination.  Max 9 rows (seg0) with 0.029 ms to first row, 0.070 ms to end, start offset by 633 ms.
                                                     ->  Seq Scan on smallt2_part_1_prt_4 smallt2_part  (cost=0.00..6.84 rows=1 width=4)
                                                           Rows out:  Avg 4.5 rows x 2 workers.  Max 6 rows (seg1) with 0.202 ms to first row, 0.222 ms to end, start offset by 505 ms.
 Slice statistics:
   (slice0)    Executor memory: 891K bytes.
   (slice1)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice2)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice3)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice4)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice5)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice6)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice7)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice8)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice9)    Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice10)   Executor memory: 671K bytes avg x 2 workers, 671K bytes max (seg0).
   (slice11)   Executor memory: 679K bytes avg x 2 workers, 679K bytes max (seg0).
   (slice12)   Executor memory: 687K bytes avg x 2 workers, 687K bytes max (seg0).
   (slice13)   Executor memory: 695K bytes avg x 2 workers, 695K bytes max (seg0).
   (slice14)   Executor memory: 703K bytes avg x 2 workers, 703K bytes max (seg0).
   (slice15)   Executor memory: 711K bytes avg x 2 workers, 711K bytes max (seg0).
   (slice16)   Executor memory: 719K bytes avg x 2 workers, 719K bytes max (seg0).
   (slice17)   Executor memory: 728K bytes avg x 2 workers, 728K bytes max (seg0).
   (slice18)   Executor memory: 736K bytes avg x 2 workers, 736K bytes max (seg0).
   (slice19)   Executor memory: 744K bytes avg x 2 workers, 744K bytes max (seg0).
   (slice20)   Executor memory: 752K bytes avg x 2 workers, 752K bytes max (seg0).
   (slice21)   Executor memory: 760K bytes avg x 2 workers, 760K bytes max (seg0).
   (slice22)   Executor memory: 768K bytes avg x 2 workers, 768K bytes max (seg0).
   (slice23)   Executor memory: 776K bytes avg x 2 workers, 776K bytes max (seg0).
   (slice24)   Executor memory: 784K bytes avg x 2 workers, 784K bytes max (seg0).
   (slice25)   Executor memory: 792K bytes avg x 2 workers, 792K bytes max (seg0).
   (slice26)   Executor memory: 1297K bytes avg x 2 workers, 1297K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Total runtime: 646.018 ms
(320 rows)

-- Sort in MergeJoin
set enable_hashjoin=off;
set enable_mergejoin=on;
select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i and t1.i < 2;
 i |    t    |     d      
---+---------+------------
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
(200 rows)

explain analyze select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i and t1.i < 2;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=7.36..8.06 rows=21 width=15)
   Rows out:  200 rows at destination with 1.090 ms to first row, 1.319 ms to end, start offset by 0.432 ms.
   ->  Merge Join  (cost=7.36..8.06 rows=21 width=15)
         Merge Cond: t1.i = t2.i
         Rows out:  Avg 100.0 rows x 2 workers.  Max 100 rows (seg0) with 0.190 ms to first row, 0.320 ms to end, start offset by 0.879 ms.
         ->  Sort  (cost=3.68..3.73 rows=10 width=15)
               Sort Key: t1.i
               Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.105 ms to first row, 0.111 ms to end, start offset by 0.879 ms.
               Executor memory:  29K bytes avg, 29K bytes max (seg0).
               Work_mem used:  29K bytes avg, 29K bytes max (seg0).
               ->  Seq Scan on smallt t1  (cost=0.00..3.25 rows=10 width=15)
                     Filter: i < 2
                     Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.029 ms to first row, 0.052 ms to end, start offset by 0.911 ms.
         ->  Sort  (cost=3.68..3.73 rows=10 width=4)
               Sort Key: t2.i
               Rows out:  Avg 91.0 rows x 2 workers.  Max 91 rows (seg0) with 0.081 ms to first row, 0.096 ms to end, start offset by 0.985 ms.
               Executor memory:  29K bytes avg, 29K bytes max (seg0).
               Work_mem used:  29K bytes avg, 29K bytes max (seg0).
               ->  Seq Scan on smallt t2  (cost=0.00..3.25 rows=10 width=4)
                     Filter: i < 2
                     Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.017 ms to first row, 0.039 ms to end, start offset by 1.016 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 215K bytes avg x 2 workers, 215K bytes max (seg0).  Work_mem: 29K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=off; enable_mergejoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Total runtime: 2.237 ms
(28 rows)

select t1.* from smallt as t1, smallt as t2 where t1.d = t2.d and t1.i < 2;
 i |    t    |     d      
---+---------+------------
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
(100 rows)

--start_ignore
explain analyze select t1.* from smallt as t1, smallt as t2 where t1.d = t2.d and t1.i < 2;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice2; segments: 2)  (cost=11.24..14.44 rows=51 width=15)
   Rows out:  100 rows at destination with 4.169 ms to first row, 4.288 ms to end, start offset by 0.489 ms.
   ->  Merge Join  (cost=11.24..14.44 rows=51 width=15)
         Merge Cond: t1.d = t2.d
         Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 3.293 ms to first row, 3.380 ms to end, start offset by 1.050 ms.
         ->  Sort  (cost=4.91..5.01 rows=20 width=15)
               Sort Key: t1.d
               Rows out:  Avg 20.0 rows x 2 workers.  Max 20 rows (seg0) with 3.102 ms to first row, 3.106 ms to end, start offset by 1.050 ms.
               Executor memory:  29K bytes avg, 29K bytes max (seg0).
               Work_mem used:  29K bytes avg, 29K bytes max (seg0).
               ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..3.85 rows=20 width=15)
                     Rows out:  Avg 20.0 rows x 2 workers at destination.  Max 20 rows (seg0) with 2.515 ms to first row, 3.034 ms to end, start offset by 1.079 ms.
                     ->  Seq Scan on smallt t1  (cost=0.00..3.25 rows=10 width=15)
                           Filter: i < 2
                           Rows out:  Avg 10.0 rows x 2 workers.  Max 10 rows (seg0) with 0.112 ms to first row, 0.195 ms to end, start offset by 3.409 ms.
         ->  Sort  (cost=6.32..6.57 rows=50 width=4)
               Sort Key: t2.d
               Rows out:  Avg 71.0 rows x 2 workers.  Max 71 rows (seg0) with 0.182 ms to first row, 0.193 ms to end, start offset by 4.154 ms.
               Executor memory:  29K bytes avg, 29K bytes max (seg0).
               Work_mem used:  29K bytes avg, 29K bytes max (seg0).
               ->  Seq Scan on smallt t2  (cost=0.00..3.00 rows=50 width=4)
                     Rows out:  Avg 50.0 rows x 2 workers.  Max 50 rows (seg0) with 0.043 ms to first row, 0.090 ms to end, start offset by 4.188 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 191K bytes avg x 2 workers, 191K bytes max (seg0).
   (slice2)    Executor memory: 231K bytes avg x 2 workers, 231K bytes max (seg0).  Work_mem: 29K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_hashjoin=off; enable_mergejoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Total runtime: 5.345 ms
(30 rows)

--end_ignore
set enable_hashjoin=on;
set enable_mergejoin=off;
-- ShareInputScan
--with my_group_max(i, maximum) as (select i, max(d) from smallt group by i)
--select smallt2.* from my_group_max, smallt2 where my_group_max.i = smallt2.i
--and smallt2.i < any (select maximum from my_group_max);
--explain analyze with my_group_max(i, maximum) as (select i, max(d) from smallt group by i)
--select smallt2.* from my_group_max, smallt2 where my_group_max.i = smallt2.i
--and smallt2.i < any (select maximum from my_group_max);
-- IndexScan
create index smallt_d_idx on smallt (d);
create index smallt2_d_idx on smallt2 (d);
set enable_hashjoin=off;
set enable_nestloop=on;
set enable_seqscan=off;
set enable_bitmapscan=off;
select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
 i |    t    |     d      
---+---------+------------
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
(20 rows)

explain analyze select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=300.33..601.12 rows=2 width=15)
   Rows out:  20 rows at destination with 0.665 ms to first row, 0.675 ms to end, start offset by 0.380 ms.
   ->  Nested Loop  (cost=300.33..601.12 rows=2 width=15)
         Join Filter: smallt.i = smallt2.i
         Rows out:  20 rows (seg0) with 0.053 ms to first row, 0.116 ms to end, start offset by 0.763 ms.
         ->  Index Scan using smallt_d_idx on smallt  (cost=0.00..300.34 rows=3 width=15)
               Index Cond: d = '01-04-2011'::date
               Rows out:  5 rows (seg0) with 0.021 ms to first row, 0.035 ms to end, start offset by 0.763 ms.
         ->  Materialize  (cost=300.33..300.37 rows=2 width=4)
               Rows out:  20 rows (seg0) with 0.028 ms to first row, 0.053 ms to end of 5 scans, start offset by 0.888 ms.
               ->  Index Scan using smallt2_d_idx on smallt2  (cost=0.00..300.32 rows=2 width=4)
                     Index Cond: d = '01-04-2011'::date
                     Rows out:  4 rows (seg0) with 0.015 ms to first row, 0.029 ms to end, start offset by 0.795 ms.
 Slice statistics:
   (slice0)    Executor memory: 318K bytes.
   (slice1)    Executor memory: 167K bytes avg x 2 workers, 183K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_bitmapscan=off; enable_hashjoin=off; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; gp_enable_agg_distinct=on
 Total runtime: 1.486 ms
(20 rows)

-- BitmapScan
set enable_indexscan=off;
set enable_bitmapscan=on;
select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
 i |    t    |     d      
---+---------+------------
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
(20 rows)

explain analyze select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 2:1  (slice1; segments: 2)  (cost=202.63..205.14 rows=2 width=15)
   Rows out:  20 rows at destination with 0.852 ms to first row, 0.865 ms to end, start offset by 0.408 ms.
   ->  Nested Loop  (cost=202.63..205.14 rows=2 width=15)
         Join Filter: smallt.i = smallt2.i
         Rows out:  20 rows (seg0) with 0.222 ms to first row, 0.284 ms to end, start offset by 0.831 ms.
         ->  Bitmap Heap Scan on smallt  (cost=100.29..102.35 rows=3 width=15)
               Recheck Cond: d = '01-04-2011'::date
               Rows out:  5 rows (seg0) with 0.090 ms to first row, 0.105 ms to end, start offset by 0.831 ms.
               ->  Bitmap Index Scan on smallt_d_idx  (cost=0.00..100.29 rows=3 width=0)
                     Index Cond: d = '01-04-2011'::date
                     Bitmaps out:  Avg 1.0 x 2 workers.  Max 1 (seg0) with 0.019 ms to end, start offset by 0.886 ms.
                     Work_mem used:  9K bytes.
         ->  Materialize  (cost=102.34..102.38 rows=2 width=4)
               Rows out:  20 rows (seg0) with 0.130 ms to first row, 0.155 ms to end of 5 scans, start offset by 1.115 ms.
               ->  Bitmap Heap Scan on smallt2  (cost=100.28..102.33 rows=2 width=4)
                     Recheck Cond: d = '01-04-2011'::date
                     Rows out:  4 rows (seg0) with 0.075 ms to first row, 0.088 ms to end, start offset by 0.973 ms.
                     ->  Bitmap Index Scan on smallt2_d_idx  (cost=0.00..100.28 rows=2 width=0)
                           Index Cond: d = '01-04-2011'::date
                           Bitmaps out:  1 (seg0) with 0.014 ms to end, start offset by 1.022 ms.
                           Work_mem used:  9K bytes.
 Slice statistics:
   (slice0)    Executor memory: 382K bytes.
   (slice1)    Executor memory: 419K bytes avg x 2 workers, 487K bytes max (seg0).  Work_mem: 9K bytes max.
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  enable_bitmapscan=on; enable_hashjoin=off; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; gp_enable_agg_distinct=on
 Total runtime: 1.695 ms
(28 rows)

set enable_hashjoin=on;
set enable_nestloop=off;
set enable_seqscan=on;
set enable_indexscan=on;
-- SubPlan
with my_group_sum(d, total) as (select d, sum(i) from smallt group by d)
select smallt2.* from smallt2
where i < all (select total from my_group_sum, smallt, smallt2 as tmp where my_group_sum.d = smallt.d and smallt.d = tmp.d and my_group_sum.d = smallt2.d)
and i = 0 order by 1,2,3; --order 1,2,3
 i |   t    |     d      
---+--------+------------
 0 | text 0 | 01-06-2011
 0 | text 5 | 01-06-2011
 0 | text 5 | 01-06-2011
(3 rows)

select smallt2.* from smallt2
where i < all (select total from (select d, sum(i) as total from smallt group by d) as my_group_sum, smallt, smallt2 as tmp
    where my_group_sum.d = smallt.d and smallt.d = tmp.d and my_group_sum.d = smallt2.d)
and i = 0 order by 1,2,3; --order 1,2,3
 i |   t    |     d      
---+--------+------------
 0 | text 0 | 01-06-2011
 0 | text 5 | 01-06-2011
 0 | text 5 | 01-06-2011
(3 rows)

-- Nested Subplan
drop table if exists r;
drop table if exists s;
drop table if exists t;
create table r (r1 int, r2 int, r3 int);
create table s (s1 int, s2 int, s3 int);
create table t (t1 int, t2 int, t3 int);
insert into r select generate_series(1, 20), generate_series(1, 5), generate_series(1, 8);
insert into s select generate_series(1, 20), generate_series(6, 10), generate_series(1, 4);
insert into t select generate_series(1, 30), generate_series(1, 6), generate_series(1, 5);
select * from t where t1 > (select min(r1) from r where r2<t2 and r3 > (Select min(s3) from s where s1<r1));
 t1 | t2 | t3 
----+----+----
  3 |  3 |  3
  4 |  4 |  4
  5 |  5 |  5
  6 |  6 |  1
  8 |  2 |  3
  9 |  3 |  4
 10 |  4 |  5
 11 |  5 |  1
 12 |  6 |  2
 14 |  2 |  4
 15 |  3 |  5
 16 |  4 |  1
 17 |  5 |  2
 18 |  6 |  3
 20 |  2 |  5
 21 |  3 |  1
 22 |  4 |  2
 23 |  5 |  3
 24 |  6 |  4
 26 |  2 |  1
 27 |  3 |  2
 28 |  4 |  3
 29 |  5 |  4
 30 |  6 |  5
(24 rows)

