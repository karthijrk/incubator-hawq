set Debug_querycontext_print = true;
set Debug_querycontext_print_tuple = true;
--disable dispatching query context
set gp_query_context_mem_limit = 0;
create table a (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

truncate a;
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

drop table a;
--set a small value, 2K
set gp_query_context_mem_limit = 2;
create table a (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

truncate a;
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

drop table a;
--set a small default value
reset gp_query_context_mem_limit;
create table a (a int);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'a' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

truncate a;
select * from a;
 a 
---
(0 rows)

insert into a select generate_series(1, 10000);
select count(1), sum(a) from a;
 count |   sum    
-------+----------
 10000 | 50005000
(1 row)

drop table a;
