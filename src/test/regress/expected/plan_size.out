--start_ignore
drop table if exists plineitem cascade;
NOTICE:  table "plineitem" does not exist, skipping
drop table if exists times;
NOTICE:  table "times" does not exist, skipping
--end_ignore
-- Ignoring error messages that might cause diff when plan size changes for test queries
-- start_matchsubs
-- m/ERROR:  Query plan size limit exceeded.*/
-- s/ERROR:  Query plan size limit exceeded.*/ERROR_MESSAGE/
-- end_matchsubs
-- create partitioned lineitem, partitioned by an integer column
CREATE TABLE plineitem
(
                                  L_ID          INTEGER ,
                                  L_ORDERKEY    INTEGER ,
                                  L_PARTKEY     INTEGER ,
                                  L_SUPPKEY     INTEGER ,
                                  L_LINENUMBER  INTEGER ,
                                  L_QUANTITY    DECIMAL(15,2) ,
                                  L_EXTENDEDPRICE  DECIMAL(15,2) ,
                                  L_DISCOUNT    DECIMAL(15,2) ,
                                  L_TAX         DECIMAL(15,2) ,
                                  L_RETURNFLAG  CHAR(1) ,
                                  L_LINESTATUS  CHAR(1) ,
                                  L_SHIPDATE    DATE ,
                                  L_COMMITDATE  DATE ,
                                  L_RECEIPTDATE DATE ,
                                  L_SHIPINSTRUCT CHAR(25) ,
                                  L_SHIPMODE     CHAR(10) ,
                                  L_COMMENT      VARCHAR(44)
 ) distributed by (l_orderkey)
partition by range(L_ID)
(
start (0) inclusive end(3000) every(100)
);
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_1" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_2" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_3" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_4" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_5" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_6" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_7" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_8" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_9" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_10" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_11" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_12" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_13" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_14" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_15" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_16" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_17" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_18" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_19" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_20" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_21" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_22" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_23" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_24" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_25" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_26" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_27" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_28" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_29" for table "plineitem"
NOTICE:  CREATE TABLE will create partition "plineitem_1_prt_30" for table "plineitem"
create table times
(
id  int,
date_id date,
date_text_id varchar(20),
day_name varchar(20),
day_number_in_week int,
day_number_in_month int,
week_number_in_month int,
week_number_in_year int,
week_start_date date,
week_end_date date,
month_number int,
month_name varchar(20),
year_number int,
quarter_number int,
quarter_desc varchar(20),
leap boolean,
days_in_year int
) distributed by (date_id);
create or replace function f() returns setof plineitem as $$
select * from plineitem;
$$
language SQL;
create or replace function f2() returns bigint as $$
select count(*) from plineitem;
$$
language SQL;
set gp_max_plan_size =20;
-- Following queries should error out for plan size 20KB
-- simple select
select * from plineitem;
ERROR:  Query plan size limit exceeded, current size: 85KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
-- UDFs
select * from f();
ERROR:  Query plan size limit exceeded, current size: 85KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
CONTEXT:  SQL function "f" statement 1
select * from f2();
ERROR:  Query plan size limit exceeded, current size: 27KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
CONTEXT:  SQL function "f2" statement 1
-- Joins
select  l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
        sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
from
        plineitem,times
where
       plineitem.l_shipdate = times.date_id
group by
        l_returnflag,
        l_linestatus
order by
        l_returnflag,
        l_linestatus;
ERROR:  Query plan size limit exceeded, current size: 123KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
select l_orderkey,
       sum(l_extendedprice * (1 - l_discount)) as revenue,
       count(*) as count_order
from
      plineitem join times on (times.date_id = plineitem.l_shipdate and  plineitem.l_receiptdate < times.week_end_date)
group by
       l_orderkey
order by
       l_orderkey
LIMIT 10;
ERROR:  Query plan size limit exceeded, current size: 81KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
-- Init plans
select p1.l_orderkey,
       sum(p1.l_extendedprice * (1 - p1.l_discount)) as revenue,
       count(*) as count_order
from
      plineitem p1 join times on (times.date_id = p1.l_shipdate and  p1.l_receiptdate < times.week_end_date)
      join plineitem p2 on ( p2.l_shipdate < (select max(l_receiptdate) from plineitem))
group by
       p1.l_orderkey
order by
       p1.l_orderkey
LIMIT 10;
ERROR:  Query plan size limit exceeded, current size: 307KB, max allowed size: 20KB
HINT:  Size controlled by gp_max_plan_size
set gp_max_plan_size ='700kB';
-- Following queries should be dispatched for plan size 700kB
-- simple select
select * from plineitem;
 l_id | l_orderkey | l_partkey | l_suppkey | l_linenumber | l_quantity | l_extendedprice | l_discount | l_tax | l_returnflag | l_linestatus | l_shipdate | l_commitdate | l_receiptdate | l_shipinstruct | l_shipmode | l_comment 
------+------------+-----------+-----------+--------------+------------+-----------------+------------+-------+--------------+--------------+------------+--------------+---------------+----------------+------------+-----------
(0 rows)

-- UDFs
select * from f();
 l_id | l_orderkey | l_partkey | l_suppkey | l_linenumber | l_quantity | l_extendedprice | l_discount | l_tax | l_returnflag | l_linestatus | l_shipdate | l_commitdate | l_receiptdate | l_shipinstruct | l_shipmode | l_comment 
------+------------+-----------+-----------+--------------+------------+-----------------+------------+-------+--------------+--------------+------------+--------------+---------------+----------------+------------+-----------
(0 rows)

select * from f2();
 f2 
----
  0
(1 row)

-- Joins
select  l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
        sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
from
        plineitem,times
where
       plineitem.l_shipdate = times.date_id
group by
        l_returnflag,
        l_linestatus
order by
        l_returnflag,
        l_linestatus;
 l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order 
--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------
(0 rows)

select l_orderkey,
       sum(l_extendedprice * (1 - l_discount)) as revenue,
       count(*) as count_order
from
      plineitem join times on (times.date_id = plineitem.l_shipdate and  plineitem.l_receiptdate < times.week_end_date)
group by
       l_orderkey
order by
       l_orderkey
LIMIT 10;
 l_orderkey | revenue | count_order 
------------+---------+-------------
(0 rows)

-- Init plans
select p1.l_orderkey,
       sum(p1.l_extendedprice * (1 - p1.l_discount)) as revenue,
       count(*) as count_order
from
      plineitem p1 join times on (times.date_id = p1.l_shipdate and  p1.l_receiptdate < times.week_end_date)
      join plineitem p2 on ( p2.l_shipdate < (select max(l_receiptdate) from plineitem))
group by
       p1.l_orderkey
order by
       p1.l_orderkey
LIMIT 10;
 l_orderkey | revenue | count_order 
------------+---------+-------------
(0 rows)

set gp_max_plan_size ='10MB';
-- Following queries should success for plan size 10MB
-- simple select
select * from plineitem;
 l_id | l_orderkey | l_partkey | l_suppkey | l_linenumber | l_quantity | l_extendedprice | l_discount | l_tax | l_returnflag | l_linestatus | l_shipdate | l_commitdate | l_receiptdate | l_shipinstruct | l_shipmode | l_comment 
------+------------+-----------+-----------+--------------+------------+-----------------+------------+-------+--------------+--------------+------------+--------------+---------------+----------------+------------+-----------
(0 rows)

-- UDFs
select * from f();
 l_id | l_orderkey | l_partkey | l_suppkey | l_linenumber | l_quantity | l_extendedprice | l_discount | l_tax | l_returnflag | l_linestatus | l_shipdate | l_commitdate | l_receiptdate | l_shipinstruct | l_shipmode | l_comment 
------+------------+-----------+-----------+--------------+------------+-----------------+------------+-------+--------------+--------------+------------+--------------+---------------+----------------+------------+-----------
(0 rows)

select * from f2();
 f2 
----
  0
(1 row)

-- Joins
select  l_returnflag,
        l_linestatus,
        sum(l_quantity) as sum_qty,
        sum(l_extendedprice) as sum_base_price,
        sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
        sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
        avg(l_quantity) as avg_qty,
        avg(l_extendedprice) as avg_price,
        avg(l_discount) as avg_disc,
        count(*) as count_order
from
        plineitem,times
where
       plineitem.l_shipdate = times.date_id
group by
        l_returnflag,
        l_linestatus
order by
        l_returnflag,
        l_linestatus;
 l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order 
--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------
(0 rows)

select l_orderkey,
       sum(l_extendedprice * (1 - l_discount)) as revenue,
       count(*) as count_order
from
      plineitem join times on (times.date_id = plineitem.l_shipdate and  plineitem.l_receiptdate < times.week_end_date)
group by
       l_orderkey
order by
       l_orderkey
LIMIT 10;
 l_orderkey | revenue | count_order 
------------+---------+-------------
(0 rows)

-- Init plans
select p1.l_orderkey,
       sum(p1.l_extendedprice * (1 - p1.l_discount)) as revenue,
       count(*) as count_order
from
      plineitem p1 join times on (times.date_id = p1.l_shipdate and  p1.l_receiptdate < times.week_end_date)
      join plineitem p2 on ( p2.l_shipdate < (select max(l_receiptdate) from plineitem))
group by
       p1.l_orderkey
order by
       p1.l_orderkey
LIMIT 10;
 l_orderkey | revenue | count_order 
------------+---------+-------------
(0 rows)

