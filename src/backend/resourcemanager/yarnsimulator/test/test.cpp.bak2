#include <iostream>
#include <sstream>
#include "rpc.pb.h"
#include "yarnsimulator.pb.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <netinet/tcp.h>
#include <google/protobuf/message.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/zero_copy_stream_impl.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
#include <pthread.h>

using namespace google::protobuf::io;
using namespace protobuf::socketrpc;
using namespace std;

pthread_t tid;

typedef struct _thread_data
{
    string buffer;
    Request  request;
    Response response;
} thread_data;

static void* rpc_thread_func(void *arg)
{
    thread_data* data = (thread_data*)arg;
    Request& req = data->request;

    cout<<"req:"<<req.method_name()<<" "<<req.request_proto()<<endl;
    cout<<"bufsize: "<<data->buffer.size()<<endl;

    int host_port= 18080;
    char* host_name="127.0.0.1";
    struct sockaddr_in my_addr;

    int hsock = socket(AF_INET, SOCK_STREAM, 0);
    int flag = 1; 
    setsockopt(hsock, IPPROTO_TCP, TCP_NODELAY, (char *) &flag, sizeof(int));
    my_addr.sin_family = AF_INET ;
    my_addr.sin_port = htons(host_port);

    memset(&(my_addr.sin_zero), 0, 8);
    my_addr.sin_addr.s_addr = inet_addr(host_name);

    if (connect( hsock, (struct sockaddr*)&my_addr, sizeof(my_addr)) < 0) {
        cout<<"connect error"<<endl;
        return NULL;
    } else {
        cout<<"connect ok"<<endl;
    }

    if (send(hsock, (void *)data->buffer.c_str(), data->buffer.size(), 0) < 0) {
        cout<<"send error"<<endl;
        return NULL;
    } else {
        cout<<"send ok"<<endl;
    }
    
    return NULL;
}

int main(int argv, char** argc)
{
    /*
    thread_data* data = new thread_data;
    
    data->request.set_service_name("YarnSimulatorService");
    data->request.set_method_name("createJob");

    CreateJobRequestProto create_job_req;
    JobContextProto* job = create_job_req.mutable_jobcontext(); 
    job->set_jobname("myjob");
    job->set_queue("test_queue");
    create_job_req.SerializeToString(&data->buffer);
    data->request.set_request_proto(data->buffer);
    */

    string job_buffer;
    CreateJobRequestProto create_job_req;
    JobContextProto* job = create_job_req.mutable_jobcontext(); 
    job->set_jobname("myjob");
    job->set_queue("test_queue");
    create_job_req.SerializeToString(&job_buffer);

    Request request;
    request.set_service_name("YarnSimulatorService");
    request.set_method_name("createJob");
    request.set_request_proto(job_buffer); 
   
    string buffer;
    request.SerializeToString(&buffer);

    int host_port= 18080;
    char* host_name="127.0.0.1";
    struct sockaddr_in my_addr;

    int hsock = socket(AF_INET, SOCK_STREAM, 0);
    int flag = 1; 
    setsockopt(hsock, IPPROTO_TCP, TCP_NODELAY, (char *) &flag, sizeof(int));
    my_addr.sin_family = AF_INET ;
    my_addr.sin_port = htons(host_port);

    memset(&(my_addr.sin_zero), 0, 8);
    my_addr.sin_addr.s_addr = inet_addr(host_name);

    if (connect( hsock, (struct sockaddr*)&my_addr, sizeof(my_addr)) < 0) {
        cout<<"connect error"<<endl;
        return -1;
    } else {
        cout<<"connect ok"<<endl;
    }

    if (send(hsock, (void *)buffer.c_str(), buffer.size(), 0) < 0) {
        cout<<"send error"<<endl;
        return -1;
    } else {
        cout<<"send ok"<<endl;
    }
    
 
    //rpc_thread_func((void*)data);
    /*
    int ret = pthread_create(&tid, NULL, rpc_thread_func, (void*)data);
    if (ret != 0) {
        cout<<"pthread_create error"<<endl;
        return -1;
    } else {
        cout<<"pthread_create ok"<<endl;
    }

    pthread_join(tid, NULL);
    */
    /*
    char recv_buf[1];
    memset(recv_buf, 0, 1);
    int recv_size = 0;
    recv_size = recv(hsock, (void*)recv_buf, 1, 0);
    if ( recv_size < 0) {
        cout<<"recv error"<<endl;
        return -1;
    } else {
        cout<<"recv ok"<<endl;
    }
    
    std::stringstream recv_data(recv_buf);

    CreateJobResponseProto create_job_res;
    create_job_res.ParseFromIstream(&recv_data);
*/

    return 0;
}
